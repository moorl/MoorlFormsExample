<?php declare(strict_types=1);

namespace MoorlFormsExample\Core\Content\Form\Action;

use MoorlForms\Core\Content\Form\Action\FormActionExtension;
use MoorlForms\Core\Content\Form\Action\FormActionInterface;
use MoorlForms\Core\Content\Form\FormEntity;
use Shopware\Core\Content\Newsletter\SalesChannel\AbstractNewsletterSubscribeRoute;
use Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute;
use Shopware\Core\Framework\Validation\DataBag\RequestDataBag;

class FormActionExample extends FormActionExtension implements FormActionInterface
{
    private AbstractNewsletterSubscribeRoute $subscribeRoute;

    /**
     * FormActionExample constructor.
     * @param AbstractNewsletterSubscribeRoute $subscribeRoute
     *
     * This example always register the customer for the newsletter.
     * You can add external services for your needs!
     */
    public function __construct(
        AbstractNewsletterSubscribeRoute $subscribeRoute
    ) {
        $this->subscribeRoute = $subscribeRoute;
    }

    public function getName(): string
    {
        return 'example';
    }

    /**
     * @param FormEntity $form
     *
     * The initialisation will always executed before the form is loaded.
     */
    public function init(FormEntity $form): void
    {
        parent::init($form); // TODO: Change the autogenerated stub
    }

    /**
     * @param FormEntity $form
     *
     * Until all form values are validated, the process for the form action will executed.
     */
    public function process(FormEntity $form): void
    {
        /**
         * We don't know if there is a valid mail, so cancel the process if not.
         */
        if (!$this->request->get('email')) {
            return;
        }

        $storefrontUrl = $this->salesChannelContext->getSalesChannel()->getDomains()->first()->getUrl();

        $dataBag = new RequestDataBag($this->request->request->all());
        $dataBag->set('option', NewsletterSubscribeRoute::OPTION_SUBSCRIBE);
        $dataBag->set('storefrontUrl', $storefrontUrl);

        $this->subscribeRoute->subscribe($dataBag, $this->salesChannelContext, false);
    }
}
